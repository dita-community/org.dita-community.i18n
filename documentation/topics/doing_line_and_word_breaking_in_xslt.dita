<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="doing_line_and_word_breaking_in_xslt">
 <title>Doing Line and Word Breaking in XSLT</title>
 <shortdesc>The i18n library provides XSLT access to the ICU4J line and working
    functions.</shortdesc>
 <conbody>
  <p>The i18n XSLT utility library provides functions for doing locale-aware word and line breaking
      of strings. This can be useful for things like estimating rendered lengths of strings,
      generating word indexes, and finding appropriate points to insert zero-width spaces in literal
      examples where line wrapping would not otherwise occur.</p>
    <p>The file <filepath>test/xsl/test-collator.xsl</filepath> in the i18n plugin demonstrates how
      to use the collator and the line and word breaking utility functions. </p>
    <p>For example, to break a line into words you can do something like
      this:<codeblock>&lt;xsl:variable name="words" as="xs:string*"
  select="dci18n:splitWords(normalize-space(.), $langCode)
/>
&lt;xsl:for-each select="$words">
  &lt;p>&lt;span class="word">&lt;xsl:value-of select="."/>&lt;/span>&lt;/p>
&lt;/xsl:for-each></codeblock></p>
    <p>The <codeph>dci18n:splitWords()</codeph> function returns words and whitespace and
      punctuation between words (it is backed by an ICU4J word break iterator). If you only want
      words you'll need to filter the resulting list of tokens in some way, such as using
        <xmlelement>xsl:analyze-string</xmlelement> or an expression
      like:<codeblock>for $token in dci18n:splitWords(normalize-space(.), $langCode)
return
  if (matches($token, '^[\p{P}\s]+$')
  then ()
  else $token</codeblock></p>
    <p>The <codeph>dci18n:splitLines()</codeph> function returns a sequence of integers, each
      integer specifying the zero-indexed position of the next character where a line  break is
      allowed.</p>
 </conbody>
</concept>
